datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String
  password     String
  admin        Boolean
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @updatedAt @map(name: "updated_at")
  lendings     Lending[]
  reservetions Reservetion[]
  accounts     Account[]
  sessions     Session[]

  @@map("users")
}

// 本の情報
model Book {
  id           String        @id @default(cuid())
  title        String
  imageUrl     String        @map(name: "image_url")
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @updatedAt @map(name: "updated_at")
  lendings     Lending[]
  reservetions Reservetion[]

  @@map("books")
}

// 貸出管理系
model Lending {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")
  book      Book?    @relation(fields: [bookId], references: [id])
  bookId    String?  @map("book_id")
  startAt   DateTime @map(name: "start_at")
  endAt     DateTime @map(name: "end_at")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("lendings")
}

// 予約管理系
model Reservetion {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")
  book      Book?    @relation(fields: [bookId], references: [id])
  bookId    String?  @map("book_id")
  startAt   DateTime @map(name: "start_at")
  endAt     DateTime @map(name: "end_at")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("reservetions")
}

// 認証系
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
